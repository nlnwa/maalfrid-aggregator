// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

package veidemann_api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Role int32

const (
	// Any authenticated user
	Role_ANY_USER Role = 0
	// Any user including unauthenticated users
	Role_ANY Role = 1
	// Administrator
	Role_ADMIN Role = 2
	// Curator
	Role_CURATOR Role = 3
	// A user with permission to read internal data
	Role_READONLY Role = 4
)

var Role_name = map[int32]string{
	0: "ANY_USER",
	1: "ANY",
	2: "ADMIN",
	3: "CURATOR",
	4: "READONLY",
}

var Role_value = map[string]int32{
	"ANY_USER": 0,
	"ANY":      1,
	"ADMIN":    2,
	"CURATOR":  3,
	"READONLY": 4,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}

func (Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{0}
}

type PolitenessConfig_RobotsPolicy int32

const (
	PolitenessConfig_OBEY_ROBOTS   PolitenessConfig_RobotsPolicy = 0
	PolitenessConfig_IGNORE_ROBOTS PolitenessConfig_RobotsPolicy = 1
	PolitenessConfig_CUSTOM_ROBOTS PolitenessConfig_RobotsPolicy = 2
)

var PolitenessConfig_RobotsPolicy_name = map[int32]string{
	0: "OBEY_ROBOTS",
	1: "IGNORE_ROBOTS",
	2: "CUSTOM_ROBOTS",
}

var PolitenessConfig_RobotsPolicy_value = map[string]int32{
	"OBEY_ROBOTS":   0,
	"IGNORE_ROBOTS": 1,
	"CUSTOM_ROBOTS": 2,
}

func (x PolitenessConfig_RobotsPolicy) String() string {
	return proto.EnumName(PolitenessConfig_RobotsPolicy_name, int32(x))
}

func (PolitenessConfig_RobotsPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{10, 0}
}

type LogLevels_Level int32

const (
	LogLevels_UNDEFINED LogLevels_Level = 0
	LogLevels_ALL       LogLevels_Level = 1
	LogLevels_TRACE     LogLevels_Level = 2
	LogLevels_DEBUG     LogLevels_Level = 3
	LogLevels_INFO      LogLevels_Level = 4
	LogLevels_WARN      LogLevels_Level = 5
	LogLevels_ERROR     LogLevels_Level = 6
	LogLevels_FATAL     LogLevels_Level = 7
	LogLevels_OFF       LogLevels_Level = 8
)

var LogLevels_Level_name = map[int32]string{
	0: "UNDEFINED",
	1: "ALL",
	2: "TRACE",
	3: "DEBUG",
	4: "INFO",
	5: "WARN",
	6: "ERROR",
	7: "FATAL",
	8: "OFF",
}

var LogLevels_Level_value = map[string]int32{
	"UNDEFINED": 0,
	"ALL":       1,
	"TRACE":     2,
	"DEBUG":     3,
	"INFO":      4,
	"WARN":      5,
	"ERROR":     6,
	"FATAL":     7,
	"OFF":       8,
}

func (x LogLevels_Level) String() string {
	return proto.EnumName(LogLevels_Level_name, int32(x))
}

func (LogLevels_Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{14, 0}
}

type Meta struct {
	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string               `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Created              *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy            string               `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	LastModified         *timestamp.Timestamp `protobuf:"bytes,5,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	LastModifiedBy       string               `protobuf:"bytes,6,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	Label                []*Label             `protobuf:"bytes,7,rep,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Meta) Reset()         { *m = Meta{} }
func (m *Meta) String() string { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()    {}
func (*Meta) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{0}
}

func (m *Meta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Meta.Unmarshal(m, b)
}
func (m *Meta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Meta.Marshal(b, m, deterministic)
}
func (m *Meta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Meta.Merge(m, src)
}
func (m *Meta) XXX_Size() int {
	return xxx_messageInfo_Meta.Size(m)
}
func (m *Meta) XXX_DiscardUnknown() {
	xxx_messageInfo_Meta.DiscardUnknown(m)
}

var xxx_messageInfo_Meta proto.InternalMessageInfo

func (m *Meta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Meta) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Meta) GetCreated() *timestamp.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Meta) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *Meta) GetLastModified() *timestamp.Timestamp {
	if m != nil {
		return m.LastModified
	}
	return nil
}

func (m *Meta) GetLastModifiedBy() string {
	if m != nil {
		return m.LastModifiedBy
	}
	return ""
}

func (m *Meta) GetLabel() []*Label {
	if m != nil {
		return m.Label
	}
	return nil
}

type Label struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Label) Reset()         { *m = Label{} }
func (m *Label) String() string { return proto.CompactTextString(m) }
func (*Label) ProtoMessage()    {}
func (*Label) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{1}
}

func (m *Label) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Label.Unmarshal(m, b)
}
func (m *Label) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Label.Marshal(b, m, deterministic)
}
func (m *Label) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Label.Merge(m, src)
}
func (m *Label) XXX_Size() int {
	return xxx_messageInfo_Label.Size(m)
}
func (m *Label) XXX_DiscardUnknown() {
	xxx_messageInfo_Label.DiscardUnknown(m)
}

var xxx_messageInfo_Label proto.InternalMessageInfo

func (m *Label) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Label) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// A crawl entity (might be an organisation with one or more seeds)
type CrawlEntity struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta                 *Meta    `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrawlEntity) Reset()         { *m = CrawlEntity{} }
func (m *CrawlEntity) String() string { return proto.CompactTextString(m) }
func (*CrawlEntity) ProtoMessage()    {}
func (*CrawlEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{2}
}

func (m *CrawlEntity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlEntity.Unmarshal(m, b)
}
func (m *CrawlEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlEntity.Marshal(b, m, deterministic)
}
func (m *CrawlEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlEntity.Merge(m, src)
}
func (m *CrawlEntity) XXX_Size() int {
	return xxx_messageInfo_CrawlEntity.Size(m)
}
func (m *CrawlEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlEntity.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlEntity proto.InternalMessageInfo

func (m *CrawlEntity) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CrawlEntity) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type Seed struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta                 *Meta       `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	EntityId             string      `protobuf:"bytes,3,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Scope                *CrawlScope `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	JobId                []string    `protobuf:"bytes,5,rep,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Disabled             bool        `protobuf:"varint,18,opt,name=disabled,proto3" json:"disabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Seed) Reset()         { *m = Seed{} }
func (m *Seed) String() string { return proto.CompactTextString(m) }
func (*Seed) ProtoMessage()    {}
func (*Seed) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{3}
}

func (m *Seed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Seed.Unmarshal(m, b)
}
func (m *Seed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Seed.Marshal(b, m, deterministic)
}
func (m *Seed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Seed.Merge(m, src)
}
func (m *Seed) XXX_Size() int {
	return xxx_messageInfo_Seed.Size(m)
}
func (m *Seed) XXX_DiscardUnknown() {
	xxx_messageInfo_Seed.DiscardUnknown(m)
}

var xxx_messageInfo_Seed proto.InternalMessageInfo

func (m *Seed) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Seed) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Seed) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *Seed) GetScope() *CrawlScope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *Seed) GetJobId() []string {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *Seed) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

type CrawlJob struct {
	Id                   string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta                 *Meta              `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	ScheduleId           string             `protobuf:"bytes,3,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Limits               *CrawlLimitsConfig `protobuf:"bytes,4,opt,name=limits,proto3" json:"limits,omitempty"`
	CrawlConfigId        string             `protobuf:"bytes,5,opt,name=crawl_config_id,json=crawlConfigId,proto3" json:"crawl_config_id,omitempty"`
	Disabled             bool               `protobuf:"varint,18,opt,name=disabled,proto3" json:"disabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CrawlJob) Reset()         { *m = CrawlJob{} }
func (m *CrawlJob) String() string { return proto.CompactTextString(m) }
func (*CrawlJob) ProtoMessage()    {}
func (*CrawlJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{4}
}

func (m *CrawlJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlJob.Unmarshal(m, b)
}
func (m *CrawlJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlJob.Marshal(b, m, deterministic)
}
func (m *CrawlJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlJob.Merge(m, src)
}
func (m *CrawlJob) XXX_Size() int {
	return xxx_messageInfo_CrawlJob.Size(m)
}
func (m *CrawlJob) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlJob.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlJob proto.InternalMessageInfo

func (m *CrawlJob) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CrawlJob) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CrawlJob) GetScheduleId() string {
	if m != nil {
		return m.ScheduleId
	}
	return ""
}

func (m *CrawlJob) GetLimits() *CrawlLimitsConfig {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *CrawlJob) GetCrawlConfigId() string {
	if m != nil {
		return m.CrawlConfigId
	}
	return ""
}

func (m *CrawlJob) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

type CrawlConfig struct {
	Id              string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta            *Meta        `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	BrowserConfigId string       `protobuf:"bytes,7,opt,name=browser_config_id,json=browserConfigId,proto3" json:"browser_config_id,omitempty"`
	PolitenessId    string       `protobuf:"bytes,8,opt,name=politeness_id,json=politenessId,proto3" json:"politeness_id,omitempty"`
	Extra           *ExtraConfig `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`
	MinimumDnsTtlS  int32        `protobuf:"varint,10,opt,name=minimum_dns_ttl_s,json=minimumDnsTtlS,proto3" json:"minimum_dns_ttl_s,omitempty"`
	// The weighting between jobs when two jobs compete on fetching resources from the same hosts.
	// The job will be randomly choosed, but weighted such that if that two jobs with weight 1.0 and one job with
	// weight 2.0 compete, then the two first jobs will each have 25% probability of beeing choosed and the the third
	// job will have 50% probability of beeing choosed.
	PriorityWeight       float64  `protobuf:"fixed64,11,opt,name=priority_weight,json=priorityWeight,proto3" json:"priority_weight,omitempty"`
	DepthFirst           bool     `protobuf:"varint,20,opt,name=depth_first,json=depthFirst,proto3" json:"depth_first,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrawlConfig) Reset()         { *m = CrawlConfig{} }
func (m *CrawlConfig) String() string { return proto.CompactTextString(m) }
func (*CrawlConfig) ProtoMessage()    {}
func (*CrawlConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{5}
}

func (m *CrawlConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlConfig.Unmarshal(m, b)
}
func (m *CrawlConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlConfig.Marshal(b, m, deterministic)
}
func (m *CrawlConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlConfig.Merge(m, src)
}
func (m *CrawlConfig) XXX_Size() int {
	return xxx_messageInfo_CrawlConfig.Size(m)
}
func (m *CrawlConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlConfig proto.InternalMessageInfo

func (m *CrawlConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CrawlConfig) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CrawlConfig) GetBrowserConfigId() string {
	if m != nil {
		return m.BrowserConfigId
	}
	return ""
}

func (m *CrawlConfig) GetPolitenessId() string {
	if m != nil {
		return m.PolitenessId
	}
	return ""
}

func (m *CrawlConfig) GetExtra() *ExtraConfig {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *CrawlConfig) GetMinimumDnsTtlS() int32 {
	if m != nil {
		return m.MinimumDnsTtlS
	}
	return 0
}

func (m *CrawlConfig) GetPriorityWeight() float64 {
	if m != nil {
		return m.PriorityWeight
	}
	return 0
}

func (m *CrawlConfig) GetDepthFirst() bool {
	if m != nil {
		return m.DepthFirst
	}
	return false
}

type CrawlScheduleConfig struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta                 *Meta                `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	CronExpression       string               `protobuf:"bytes,3,opt,name=cron_expression,json=cronExpression,proto3" json:"cron_expression,omitempty"`
	ValidFrom            *timestamp.Timestamp `protobuf:"bytes,4,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	ValidTo              *timestamp.Timestamp `protobuf:"bytes,5,opt,name=valid_to,json=validTo,proto3" json:"valid_to,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CrawlScheduleConfig) Reset()         { *m = CrawlScheduleConfig{} }
func (m *CrawlScheduleConfig) String() string { return proto.CompactTextString(m) }
func (*CrawlScheduleConfig) ProtoMessage()    {}
func (*CrawlScheduleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{6}
}

func (m *CrawlScheduleConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlScheduleConfig.Unmarshal(m, b)
}
func (m *CrawlScheduleConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlScheduleConfig.Marshal(b, m, deterministic)
}
func (m *CrawlScheduleConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlScheduleConfig.Merge(m, src)
}
func (m *CrawlScheduleConfig) XXX_Size() int {
	return xxx_messageInfo_CrawlScheduleConfig.Size(m)
}
func (m *CrawlScheduleConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlScheduleConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlScheduleConfig proto.InternalMessageInfo

func (m *CrawlScheduleConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CrawlScheduleConfig) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CrawlScheduleConfig) GetCronExpression() string {
	if m != nil {
		return m.CronExpression
	}
	return ""
}

func (m *CrawlScheduleConfig) GetValidFrom() *timestamp.Timestamp {
	if m != nil {
		return m.ValidFrom
	}
	return nil
}

func (m *CrawlScheduleConfig) GetValidTo() *timestamp.Timestamp {
	if m != nil {
		return m.ValidTo
	}
	return nil
}

type CrawlScope struct {
	SurtPrefix           string   `protobuf:"bytes,1,opt,name=surt_prefix,json=surtPrefix,proto3" json:"surt_prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrawlScope) Reset()         { *m = CrawlScope{} }
func (m *CrawlScope) String() string { return proto.CompactTextString(m) }
func (*CrawlScope) ProtoMessage()    {}
func (*CrawlScope) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{7}
}

func (m *CrawlScope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlScope.Unmarshal(m, b)
}
func (m *CrawlScope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlScope.Marshal(b, m, deterministic)
}
func (m *CrawlScope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlScope.Merge(m, src)
}
func (m *CrawlScope) XXX_Size() int {
	return xxx_messageInfo_CrawlScope.Size(m)
}
func (m *CrawlScope) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlScope.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlScope proto.InternalMessageInfo

func (m *CrawlScope) GetSurtPrefix() string {
	if m != nil {
		return m.SurtPrefix
	}
	return ""
}

type CrawlLimitsConfig struct {
	// How deep from a seed to crawl
	Depth int32 `protobuf:"varint,1,opt,name=depth,proto3" json:"depth,omitempty"`
	// Maximum time in seconds allowed for crawl to finish
	MaxDurationS int64 `protobuf:"varint,2,opt,name=max_duration_s,json=maxDurationS,proto3" json:"max_duration_s,omitempty"`
	// Maximum number of bytes to fetch before ending crawl
	MaxBytes             int64    `protobuf:"varint,3,opt,name=max_bytes,json=maxBytes,proto3" json:"max_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrawlLimitsConfig) Reset()         { *m = CrawlLimitsConfig{} }
func (m *CrawlLimitsConfig) String() string { return proto.CompactTextString(m) }
func (*CrawlLimitsConfig) ProtoMessage()    {}
func (*CrawlLimitsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{8}
}

func (m *CrawlLimitsConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlLimitsConfig.Unmarshal(m, b)
}
func (m *CrawlLimitsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlLimitsConfig.Marshal(b, m, deterministic)
}
func (m *CrawlLimitsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlLimitsConfig.Merge(m, src)
}
func (m *CrawlLimitsConfig) XXX_Size() int {
	return xxx_messageInfo_CrawlLimitsConfig.Size(m)
}
func (m *CrawlLimitsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlLimitsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlLimitsConfig proto.InternalMessageInfo

func (m *CrawlLimitsConfig) GetDepth() int32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *CrawlLimitsConfig) GetMaxDurationS() int64 {
	if m != nil {
		return m.MaxDurationS
	}
	return 0
}

func (m *CrawlLimitsConfig) GetMaxBytes() int64 {
	if m != nil {
		return m.MaxBytes
	}
	return 0
}

type BrowserConfig struct {
	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta              *Meta  `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	UserAgent         string `protobuf:"bytes,3,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	WindowWidth       int32  `protobuf:"varint,4,opt,name=window_width,json=windowWidth,proto3" json:"window_width,omitempty"`
	WindowHeight      int32  `protobuf:"varint,5,opt,name=window_height,json=windowHeight,proto3" json:"window_height,omitempty"`
	PageLoadTimeoutMs int64  `protobuf:"varint,6,opt,name=page_load_timeout_ms,json=pageLoadTimeoutMs,proto3" json:"page_load_timeout_ms,omitempty"`
	// Select scripts by label
	// A string representing a label query. The query matches if at least one label matches the query.
	// If there are multiple queries, then each query must match at least one label.
	// Label quries are case insensitive. The basic format is <code>key:value</code> where both key and value must match.
	// If value ends with <code>&ast;</code> then the key must match and value must match up until the <code>&ast;</code>.
	// If value is empty, all labels matching the key will match.
	// If key is empty, then the matching is done on the value for all keys.
	// If key is empty, then the <code>:</code> might be ommitted.
	// <pre>
	// Examples:
	//   "foo:bar"  - matches exactly labels with key=foo and value=bar
	//   "foo:"     - matches all labels with key=foo
	//   ":bar"     - matches all labels with value=bar
	//   "bar"      - matches all labels with value=bar
	//   "foo:ba*"  - matches labels with key=foo and value starting with ba (e.g. matches bar, but not ber)
	//   ":ba*"     - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
	//   "ba*"      - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
	//   ":"        - matches every label
	//   ""         - matches every label
	// </pre>
	ScriptSelector       []string          `protobuf:"bytes,7,rep,name=script_selector,json=scriptSelector,proto3" json:"script_selector,omitempty"`
	ScriptId             []string          `protobuf:"bytes,8,rep,name=script_id,json=scriptId,proto3" json:"script_id,omitempty"`
	Headers              map[string]string `protobuf:"bytes,16,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ScriptParameters     map[string]string `protobuf:"bytes,17,rep,name=script_parameters,json=scriptParameters,proto3" json:"script_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SleepAfterPageloadMs int64             `protobuf:"varint,18,opt,name=sleep_after_pageload_ms,json=sleepAfterPageloadMs,proto3" json:"sleep_after_pageload_ms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BrowserConfig) Reset()         { *m = BrowserConfig{} }
func (m *BrowserConfig) String() string { return proto.CompactTextString(m) }
func (*BrowserConfig) ProtoMessage()    {}
func (*BrowserConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{9}
}

func (m *BrowserConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrowserConfig.Unmarshal(m, b)
}
func (m *BrowserConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrowserConfig.Marshal(b, m, deterministic)
}
func (m *BrowserConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrowserConfig.Merge(m, src)
}
func (m *BrowserConfig) XXX_Size() int {
	return xxx_messageInfo_BrowserConfig.Size(m)
}
func (m *BrowserConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BrowserConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BrowserConfig proto.InternalMessageInfo

func (m *BrowserConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BrowserConfig) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *BrowserConfig) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *BrowserConfig) GetWindowWidth() int32 {
	if m != nil {
		return m.WindowWidth
	}
	return 0
}

func (m *BrowserConfig) GetWindowHeight() int32 {
	if m != nil {
		return m.WindowHeight
	}
	return 0
}

func (m *BrowserConfig) GetPageLoadTimeoutMs() int64 {
	if m != nil {
		return m.PageLoadTimeoutMs
	}
	return 0
}

func (m *BrowserConfig) GetScriptSelector() []string {
	if m != nil {
		return m.ScriptSelector
	}
	return nil
}

func (m *BrowserConfig) GetScriptId() []string {
	if m != nil {
		return m.ScriptId
	}
	return nil
}

func (m *BrowserConfig) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *BrowserConfig) GetScriptParameters() map[string]string {
	if m != nil {
		return m.ScriptParameters
	}
	return nil
}

func (m *BrowserConfig) GetSleepAfterPageloadMs() int64 {
	if m != nil {
		return m.SleepAfterPageloadMs
	}
	return 0
}

type PolitenessConfig struct {
	Id                             string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta                           *Meta                         `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	RobotsPolicy                   PolitenessConfig_RobotsPolicy `protobuf:"varint,3,opt,name=robots_policy,json=robotsPolicy,proto3,enum=veidemann.api.PolitenessConfig_RobotsPolicy" json:"robots_policy,omitempty"`
	MinimumRobotsValidityDurationS int32                         `protobuf:"varint,11,opt,name=minimum_robots_validity_duration_s,json=minimumRobotsValidityDurationS,proto3" json:"minimum_robots_validity_duration_s,omitempty"`
	CustomRobots                   string                        `protobuf:"bytes,20,opt,name=custom_robots,json=customRobots,proto3" json:"custom_robots,omitempty"`
	MinTimeBetweenPageLoadMs       int64                         `protobuf:"varint,4,opt,name=min_time_between_page_load_ms,json=minTimeBetweenPageLoadMs,proto3" json:"min_time_between_page_load_ms,omitempty"`
	MaxTimeBetweenPageLoadMs       int64                         `protobuf:"varint,5,opt,name=max_time_between_page_load_ms,json=maxTimeBetweenPageLoadMs,proto3" json:"max_time_between_page_load_ms,omitempty"`
	// *
	// The fetch time of the URI is multiplied with this value to get the delay time before fetching the next URI.
	// If min_time_between_page_load_ms and/or max_time_between_page_load_ms are set, then those values are used as
	// the upper/lower limits for delay.
	// If delay_factor is unset or zero, then a delay_facor of one is assumed. If delay_factor is negative,
	// a delay_factor of zero is assumed.
	DelayFactor       float32 `protobuf:"fixed32,6,opt,name=delay_factor,json=delayFactor,proto3" json:"delay_factor,omitempty"`
	MaxRetries        int32   `protobuf:"varint,7,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	RetryDelaySeconds int32   `protobuf:"varint,8,opt,name=retry_delay_seconds,json=retryDelaySeconds,proto3" json:"retry_delay_seconds,omitempty"`
	// Select crawl host groups by label
	// A string representing a label query. The query matches if at least one label matches the query.
	// If there are multiple queries, then each query must match at least one label.
	// Label quries are case insensitive. The basic format is <code>key:value</code> where both key and value must match.
	// If value ends with <code>&ast;</code> then the key must match and value must match up until the <code>&ast;</code>.
	// If value is empty, all labels matching the key will match.
	// If key is empty, then the matching is done on the value for all keys.
	// If key is empty, then the <code>:</code> might be ommitted.
	// <pre>
	// Examples:
	//   "foo:bar"  - matches exactly labels with key=foo and value=bar
	//   "foo:"     - matches all labels with key=foo
	//   ":bar"     - matches all labels with value=bar
	//   "bar"      - matches all labels with value=bar
	//   "foo:ba*"  - matches labels with key=foo and value starting with ba (e.g. matches bar, but not ber)
	//   ":ba*"     - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
	//   "ba*"      - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
	//   ":"        - matches every label
	//   ""         - matches every label
	// </pre>
	CrawlHostGroupSelector []string `protobuf:"bytes,9,rep,name=crawl_host_group_selector,json=crawlHostGroupSelector,proto3" json:"crawl_host_group_selector,omitempty"`
	// If true, use hostname instead of ip for politeness
	UseHostname          bool     `protobuf:"varint,10,opt,name=use_hostname,json=useHostname,proto3" json:"use_hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PolitenessConfig) Reset()         { *m = PolitenessConfig{} }
func (m *PolitenessConfig) String() string { return proto.CompactTextString(m) }
func (*PolitenessConfig) ProtoMessage()    {}
func (*PolitenessConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{10}
}

func (m *PolitenessConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolitenessConfig.Unmarshal(m, b)
}
func (m *PolitenessConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolitenessConfig.Marshal(b, m, deterministic)
}
func (m *PolitenessConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolitenessConfig.Merge(m, src)
}
func (m *PolitenessConfig) XXX_Size() int {
	return xxx_messageInfo_PolitenessConfig.Size(m)
}
func (m *PolitenessConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PolitenessConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PolitenessConfig proto.InternalMessageInfo

func (m *PolitenessConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PolitenessConfig) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PolitenessConfig) GetRobotsPolicy() PolitenessConfig_RobotsPolicy {
	if m != nil {
		return m.RobotsPolicy
	}
	return PolitenessConfig_OBEY_ROBOTS
}

func (m *PolitenessConfig) GetMinimumRobotsValidityDurationS() int32 {
	if m != nil {
		return m.MinimumRobotsValidityDurationS
	}
	return 0
}

func (m *PolitenessConfig) GetCustomRobots() string {
	if m != nil {
		return m.CustomRobots
	}
	return ""
}

func (m *PolitenessConfig) GetMinTimeBetweenPageLoadMs() int64 {
	if m != nil {
		return m.MinTimeBetweenPageLoadMs
	}
	return 0
}

func (m *PolitenessConfig) GetMaxTimeBetweenPageLoadMs() int64 {
	if m != nil {
		return m.MaxTimeBetweenPageLoadMs
	}
	return 0
}

func (m *PolitenessConfig) GetDelayFactor() float32 {
	if m != nil {
		return m.DelayFactor
	}
	return 0
}

func (m *PolitenessConfig) GetMaxRetries() int32 {
	if m != nil {
		return m.MaxRetries
	}
	return 0
}

func (m *PolitenessConfig) GetRetryDelaySeconds() int32 {
	if m != nil {
		return m.RetryDelaySeconds
	}
	return 0
}

func (m *PolitenessConfig) GetCrawlHostGroupSelector() []string {
	if m != nil {
		return m.CrawlHostGroupSelector
	}
	return nil
}

func (m *PolitenessConfig) GetUseHostname() bool {
	if m != nil {
		return m.UseHostname
	}
	return false
}

type ExtraConfig struct {
	ExtractText          bool     `protobuf:"varint,5,opt,name=extract_text,json=extractText,proto3" json:"extract_text,omitempty"`
	CreateSnapshot       bool     `protobuf:"varint,6,opt,name=create_snapshot,json=createSnapshot,proto3" json:"create_snapshot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtraConfig) Reset()         { *m = ExtraConfig{} }
func (m *ExtraConfig) String() string { return proto.CompactTextString(m) }
func (*ExtraConfig) ProtoMessage()    {}
func (*ExtraConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{11}
}

func (m *ExtraConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtraConfig.Unmarshal(m, b)
}
func (m *ExtraConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtraConfig.Marshal(b, m, deterministic)
}
func (m *ExtraConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtraConfig.Merge(m, src)
}
func (m *ExtraConfig) XXX_Size() int {
	return xxx_messageInfo_ExtraConfig.Size(m)
}
func (m *ExtraConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtraConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ExtraConfig proto.InternalMessageInfo

func (m *ExtraConfig) GetExtractText() bool {
	if m != nil {
		return m.ExtractText
	}
	return false
}

func (m *ExtraConfig) GetCreateSnapshot() bool {
	if m != nil {
		return m.CreateSnapshot
	}
	return false
}

// Message containing a javascript to be run in a browser
type BrowserScript struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta                 *Meta    `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	Script               string   `protobuf:"bytes,3,opt,name=script,proto3" json:"script,omitempty"`
	UrlRegexp            string   `protobuf:"bytes,4,opt,name=url_regexp,json=urlRegexp,proto3" json:"url_regexp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrowserScript) Reset()         { *m = BrowserScript{} }
func (m *BrowserScript) String() string { return proto.CompactTextString(m) }
func (*BrowserScript) ProtoMessage()    {}
func (*BrowserScript) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{12}
}

func (m *BrowserScript) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrowserScript.Unmarshal(m, b)
}
func (m *BrowserScript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrowserScript.Marshal(b, m, deterministic)
}
func (m *BrowserScript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrowserScript.Merge(m, src)
}
func (m *BrowserScript) XXX_Size() int {
	return xxx_messageInfo_BrowserScript.Size(m)
}
func (m *BrowserScript) XXX_DiscardUnknown() {
	xxx_messageInfo_BrowserScript.DiscardUnknown(m)
}

var xxx_messageInfo_BrowserScript proto.InternalMessageInfo

func (m *BrowserScript) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BrowserScript) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *BrowserScript) GetScript() string {
	if m != nil {
		return m.Script
	}
	return ""
}

func (m *BrowserScript) GetUrlRegexp() string {
	if m != nil {
		return m.UrlRegexp
	}
	return ""
}

type CrawlHostGroupConfig struct {
	Id                   string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta                 *Meta                           `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	IpRange              []*CrawlHostGroupConfig_IpRange `protobuf:"bytes,3,rep,name=ip_range,json=ipRange,proto3" json:"ip_range,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CrawlHostGroupConfig) Reset()         { *m = CrawlHostGroupConfig{} }
func (m *CrawlHostGroupConfig) String() string { return proto.CompactTextString(m) }
func (*CrawlHostGroupConfig) ProtoMessage()    {}
func (*CrawlHostGroupConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{13}
}

func (m *CrawlHostGroupConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlHostGroupConfig.Unmarshal(m, b)
}
func (m *CrawlHostGroupConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlHostGroupConfig.Marshal(b, m, deterministic)
}
func (m *CrawlHostGroupConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlHostGroupConfig.Merge(m, src)
}
func (m *CrawlHostGroupConfig) XXX_Size() int {
	return xxx_messageInfo_CrawlHostGroupConfig.Size(m)
}
func (m *CrawlHostGroupConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlHostGroupConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlHostGroupConfig proto.InternalMessageInfo

func (m *CrawlHostGroupConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CrawlHostGroupConfig) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CrawlHostGroupConfig) GetIpRange() []*CrawlHostGroupConfig_IpRange {
	if m != nil {
		return m.IpRange
	}
	return nil
}

type CrawlHostGroupConfig_IpRange struct {
	IpFrom               string   `protobuf:"bytes,1,opt,name=ip_from,json=ipFrom,proto3" json:"ip_from,omitempty"`
	IpTo                 string   `protobuf:"bytes,2,opt,name=ip_to,json=ipTo,proto3" json:"ip_to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrawlHostGroupConfig_IpRange) Reset()         { *m = CrawlHostGroupConfig_IpRange{} }
func (m *CrawlHostGroupConfig_IpRange) String() string { return proto.CompactTextString(m) }
func (*CrawlHostGroupConfig_IpRange) ProtoMessage()    {}
func (*CrawlHostGroupConfig_IpRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{13, 0}
}

func (m *CrawlHostGroupConfig_IpRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlHostGroupConfig_IpRange.Unmarshal(m, b)
}
func (m *CrawlHostGroupConfig_IpRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlHostGroupConfig_IpRange.Marshal(b, m, deterministic)
}
func (m *CrawlHostGroupConfig_IpRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlHostGroupConfig_IpRange.Merge(m, src)
}
func (m *CrawlHostGroupConfig_IpRange) XXX_Size() int {
	return xxx_messageInfo_CrawlHostGroupConfig_IpRange.Size(m)
}
func (m *CrawlHostGroupConfig_IpRange) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlHostGroupConfig_IpRange.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlHostGroupConfig_IpRange proto.InternalMessageInfo

func (m *CrawlHostGroupConfig_IpRange) GetIpFrom() string {
	if m != nil {
		return m.IpFrom
	}
	return ""
}

func (m *CrawlHostGroupConfig_IpRange) GetIpTo() string {
	if m != nil {
		return m.IpTo
	}
	return ""
}

type LogLevels struct {
	LogLevel             []*LogLevels_LogLevel `protobuf:"bytes,1,rep,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *LogLevels) Reset()         { *m = LogLevels{} }
func (m *LogLevels) String() string { return proto.CompactTextString(m) }
func (*LogLevels) ProtoMessage()    {}
func (*LogLevels) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{14}
}

func (m *LogLevels) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogLevels.Unmarshal(m, b)
}
func (m *LogLevels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogLevels.Marshal(b, m, deterministic)
}
func (m *LogLevels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogLevels.Merge(m, src)
}
func (m *LogLevels) XXX_Size() int {
	return xxx_messageInfo_LogLevels.Size(m)
}
func (m *LogLevels) XXX_DiscardUnknown() {
	xxx_messageInfo_LogLevels.DiscardUnknown(m)
}

var xxx_messageInfo_LogLevels proto.InternalMessageInfo

func (m *LogLevels) GetLogLevel() []*LogLevels_LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return nil
}

type LogLevels_LogLevel struct {
	Logger               string          `protobuf:"bytes,1,opt,name=logger,proto3" json:"logger,omitempty"`
	Level                LogLevels_Level `protobuf:"varint,2,opt,name=level,proto3,enum=veidemann.api.LogLevels_Level" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *LogLevels_LogLevel) Reset()         { *m = LogLevels_LogLevel{} }
func (m *LogLevels_LogLevel) String() string { return proto.CompactTextString(m) }
func (*LogLevels_LogLevel) ProtoMessage()    {}
func (*LogLevels_LogLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{14, 0}
}

func (m *LogLevels_LogLevel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogLevels_LogLevel.Unmarshal(m, b)
}
func (m *LogLevels_LogLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogLevels_LogLevel.Marshal(b, m, deterministic)
}
func (m *LogLevels_LogLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogLevels_LogLevel.Merge(m, src)
}
func (m *LogLevels_LogLevel) XXX_Size() int {
	return xxx_messageInfo_LogLevels_LogLevel.Size(m)
}
func (m *LogLevels_LogLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_LogLevels_LogLevel.DiscardUnknown(m)
}

var xxx_messageInfo_LogLevels_LogLevel proto.InternalMessageInfo

func (m *LogLevels_LogLevel) GetLogger() string {
	if m != nil {
		return m.Logger
	}
	return ""
}

func (m *LogLevels_LogLevel) GetLevel() LogLevels_Level {
	if m != nil {
		return m.Level
	}
	return LogLevels_UNDEFINED
}

type RoleMapping struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to EmailOrGroup:
	//	*RoleMapping_Email
	//	*RoleMapping_Group
	EmailOrGroup         isRoleMapping_EmailOrGroup `protobuf_oneof:"email_or_group"`
	Role                 []Role                     `protobuf:"varint,4,rep,packed,name=role,proto3,enum=veidemann.api.Role" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *RoleMapping) Reset()         { *m = RoleMapping{} }
func (m *RoleMapping) String() string { return proto.CompactTextString(m) }
func (*RoleMapping) ProtoMessage()    {}
func (*RoleMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{15}
}

func (m *RoleMapping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleMapping.Unmarshal(m, b)
}
func (m *RoleMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleMapping.Marshal(b, m, deterministic)
}
func (m *RoleMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleMapping.Merge(m, src)
}
func (m *RoleMapping) XXX_Size() int {
	return xxx_messageInfo_RoleMapping.Size(m)
}
func (m *RoleMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleMapping.DiscardUnknown(m)
}

var xxx_messageInfo_RoleMapping proto.InternalMessageInfo

func (m *RoleMapping) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type isRoleMapping_EmailOrGroup interface {
	isRoleMapping_EmailOrGroup()
}

type RoleMapping_Email struct {
	Email string `protobuf:"bytes,2,opt,name=email,proto3,oneof"`
}

type RoleMapping_Group struct {
	Group string `protobuf:"bytes,3,opt,name=group,proto3,oneof"`
}

func (*RoleMapping_Email) isRoleMapping_EmailOrGroup() {}

func (*RoleMapping_Group) isRoleMapping_EmailOrGroup() {}

func (m *RoleMapping) GetEmailOrGroup() isRoleMapping_EmailOrGroup {
	if m != nil {
		return m.EmailOrGroup
	}
	return nil
}

func (m *RoleMapping) GetEmail() string {
	if x, ok := m.GetEmailOrGroup().(*RoleMapping_Email); ok {
		return x.Email
	}
	return ""
}

func (m *RoleMapping) GetGroup() string {
	if x, ok := m.GetEmailOrGroup().(*RoleMapping_Group); ok {
		return x.Group
	}
	return ""
}

func (m *RoleMapping) GetRole() []Role {
	if m != nil {
		return m.Role
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RoleMapping) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RoleMapping_OneofMarshaler, _RoleMapping_OneofUnmarshaler, _RoleMapping_OneofSizer, []interface{}{
		(*RoleMapping_Email)(nil),
		(*RoleMapping_Group)(nil),
	}
}

func _RoleMapping_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RoleMapping)
	// email_or_group
	switch x := m.EmailOrGroup.(type) {
	case *RoleMapping_Email:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Email)
	case *RoleMapping_Group:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Group)
	case nil:
	default:
		return fmt.Errorf("RoleMapping.EmailOrGroup has unexpected type %T", x)
	}
	return nil
}

func _RoleMapping_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RoleMapping)
	switch tag {
	case 2: // email_or_group.email
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.EmailOrGroup = &RoleMapping_Email{x}
		return true, err
	case 3: // email_or_group.group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.EmailOrGroup = &RoleMapping_Group{x}
		return true, err
	default:
		return false, nil
	}
}

func _RoleMapping_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RoleMapping)
	// email_or_group
	switch x := m.EmailOrGroup.(type) {
	case *RoleMapping_Email:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Email)))
		n += len(x.Email)
	case *RoleMapping_Group:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Group)))
		n += len(x.Group)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterEnum("veidemann.api.Role", Role_name, Role_value)
	proto.RegisterEnum("veidemann.api.PolitenessConfig_RobotsPolicy", PolitenessConfig_RobotsPolicy_name, PolitenessConfig_RobotsPolicy_value)
	proto.RegisterEnum("veidemann.api.LogLevels_Level", LogLevels_Level_name, LogLevels_Level_value)
	proto.RegisterType((*Meta)(nil), "veidemann.api.Meta")
	proto.RegisterType((*Label)(nil), "veidemann.api.Label")
	proto.RegisterType((*CrawlEntity)(nil), "veidemann.api.CrawlEntity")
	proto.RegisterType((*Seed)(nil), "veidemann.api.Seed")
	proto.RegisterType((*CrawlJob)(nil), "veidemann.api.CrawlJob")
	proto.RegisterType((*CrawlConfig)(nil), "veidemann.api.CrawlConfig")
	proto.RegisterType((*CrawlScheduleConfig)(nil), "veidemann.api.CrawlScheduleConfig")
	proto.RegisterType((*CrawlScope)(nil), "veidemann.api.CrawlScope")
	proto.RegisterType((*CrawlLimitsConfig)(nil), "veidemann.api.CrawlLimitsConfig")
	proto.RegisterType((*BrowserConfig)(nil), "veidemann.api.BrowserConfig")
	proto.RegisterMapType((map[string]string)(nil), "veidemann.api.BrowserConfig.HeadersEntry")
	proto.RegisterMapType((map[string]string)(nil), "veidemann.api.BrowserConfig.ScriptParametersEntry")
	proto.RegisterType((*PolitenessConfig)(nil), "veidemann.api.PolitenessConfig")
	proto.RegisterType((*ExtraConfig)(nil), "veidemann.api.ExtraConfig")
	proto.RegisterType((*BrowserScript)(nil), "veidemann.api.BrowserScript")
	proto.RegisterType((*CrawlHostGroupConfig)(nil), "veidemann.api.CrawlHostGroupConfig")
	proto.RegisterType((*CrawlHostGroupConfig_IpRange)(nil), "veidemann.api.CrawlHostGroupConfig.IpRange")
	proto.RegisterType((*LogLevels)(nil), "veidemann.api.LogLevels")
	proto.RegisterType((*LogLevels_LogLevel)(nil), "veidemann.api.LogLevels.LogLevel")
	proto.RegisterType((*RoleMapping)(nil), "veidemann.api.RoleMapping")
}

func init() { proto.RegisterFile("config.proto", fileDescriptor_3eaf2c85e69e9ea4) }

var fileDescriptor_3eaf2c85e69e9ea4 = []byte{
	// 1705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xdd, 0x72, 0x1b, 0xb7,
	0x15, 0x36, 0x7f, 0x56, 0x24, 0x0f, 0x29, 0x7a, 0x05, 0x2b, 0x36, 0xa3, 0x8e, 0x13, 0x79, 0xd3,
	0xa9, 0x15, 0xb7, 0xa5, 0x3a, 0x6a, 0x3c, 0x4d, 0x72, 0xd1, 0x0c, 0x29, 0x91, 0x16, 0x33, 0x12,
	0xa9, 0x82, 0x54, 0x5d, 0xf5, 0x06, 0x03, 0x72, 0x21, 0x12, 0xe9, 0xee, 0x62, 0x67, 0x01, 0x5a,
	0xe4, 0x55, 0x6f, 0x7a, 0xd1, 0xbb, 0xbe, 0x46, 0xa7, 0x0f, 0xd1, 0xe9, 0x23, 0xf4, 0x19, 0x7a,
	0xd7, 0xb7, 0xe8, 0xe0, 0x87, 0x12, 0x25, 0xbb, 0x4e, 0x22, 0xdf, 0x01, 0xdf, 0xf9, 0xf0, 0x01,
	0x38, 0x38, 0x3f, 0xbb, 0x50, 0x9b, 0x88, 0xe4, 0x92, 0x4f, 0x9b, 0x69, 0x26, 0x94, 0x40, 0x9b,
	0x6f, 0x18, 0x0f, 0x59, 0x4c, 0x93, 0xa4, 0x49, 0x53, 0xbe, 0xf3, 0xe9, 0x54, 0x88, 0x69, 0xc4,
	0xf6, 0x8d, 0x71, 0x3c, 0xbf, 0xdc, 0x57, 0x3c, 0x66, 0x52, 0xd1, 0x38, 0xb5, 0xfc, 0xe0, 0xef,
	0x79, 0x28, 0x9e, 0x32, 0x45, 0x11, 0x82, 0x62, 0x42, 0x63, 0xd6, 0xc8, 0xed, 0xe6, 0xf6, 0x2a,
	0xd8, 0x8c, 0xd1, 0x2e, 0x54, 0x43, 0x26, 0x27, 0x19, 0x4f, 0x15, 0x17, 0x49, 0x23, 0x6f, 0x4c,
	0xeb, 0x10, 0xfa, 0x02, 0x4a, 0x93, 0x8c, 0x51, 0xc5, 0xc2, 0x46, 0x61, 0x37, 0xb7, 0x57, 0x3d,
	0xd8, 0x69, 0xda, 0x1d, 0x9b, 0xab, 0x1d, 0x9b, 0xa3, 0xd5, 0x8e, 0x78, 0x45, 0x45, 0x4f, 0x01,
	0xdc, 0x90, 0x8c, 0x97, 0x8d, 0xa2, 0x91, 0xad, 0x38, 0xa4, 0xbd, 0x44, 0xdf, 0xc0, 0x66, 0x44,
	0xa5, 0x22, 0xb1, 0x08, 0xf9, 0x25, 0x67, 0x61, 0xc3, 0xfb, 0x5e, 0xe9, 0x9a, 0x5e, 0x70, 0xea,
	0xf8, 0x68, 0x0f, 0xfc, 0x5b, 0x02, 0x7a, 0x97, 0x0d, 0xb3, 0x4b, 0x7d, 0x9d, 0xd7, 0x5e, 0xa2,
	0x17, 0xe0, 0x45, 0x74, 0xcc, 0xa2, 0x46, 0x69, 0xb7, 0xb0, 0x57, 0x3d, 0xd8, 0x6e, 0xde, 0x72,
	0x5f, 0xf3, 0x44, 0xdb, 0xb0, 0xa5, 0x04, 0xfb, 0xe0, 0x99, 0x39, 0xf2, 0xa1, 0xf0, 0x27, 0xb6,
	0x74, 0x9e, 0xd2, 0x43, 0xb4, 0x0d, 0xde, 0x1b, 0x1a, 0xcd, 0x99, 0x73, 0x91, 0x9d, 0x04, 0x5d,
	0xa8, 0x1e, 0x66, 0xf4, 0x2a, 0xea, 0x24, 0x8a, 0xab, 0x25, 0xaa, 0x43, 0x9e, 0x87, 0x6e, 0x55,
	0x9e, 0x87, 0xe8, 0x39, 0x14, 0x63, 0xa6, 0xa8, 0x59, 0x53, 0x3d, 0x78, 0x74, 0x67, 0x6b, 0xfd,
	0x28, 0xd8, 0x10, 0x82, 0x7f, 0xe5, 0xa0, 0x38, 0x64, 0x2c, 0xbc, 0xb7, 0x02, 0xfa, 0x09, 0x54,
	0x98, 0x39, 0x04, 0xe1, 0xf6, 0xa1, 0x2a, 0xb8, 0x6c, 0x81, 0x5e, 0x88, 0xf6, 0xc1, 0x93, 0x13,
	0x91, 0x32, 0xf3, 0x10, 0xd5, 0x83, 0x8f, 0xef, 0xc8, 0x98, 0x2b, 0x0c, 0x35, 0x01, 0x5b, 0x1e,
	0xfa, 0x08, 0x36, 0xbe, 0x13, 0x63, 0x2d, 0xe5, 0xed, 0x16, 0xf4, 0x75, 0xbf, 0x13, 0xe3, 0x5e,
	0x88, 0x76, 0xa0, 0x1c, 0x72, 0x49, 0xc7, 0x11, 0x0b, 0x1b, 0x68, 0x37, 0xb7, 0x57, 0xc6, 0xd7,
	0xf3, 0xe0, 0x3f, 0x39, 0x28, 0x1b, 0xa1, 0x6f, 0xc5, 0xf8, 0xfe, 0xd7, 0xf8, 0x14, 0xaa, 0x72,
	0x32, 0x63, 0xe1, 0x3c, 0x62, 0x37, 0x17, 0x81, 0x15, 0xd4, 0x0b, 0xd1, 0x97, 0xb0, 0x11, 0xf1,
	0x98, 0x2b, 0xe9, 0xee, 0xb2, 0xfb, 0xae, 0xbb, 0x9c, 0x18, 0xc6, 0xa1, 0xc9, 0x1a, 0xec, 0xf8,
	0xe8, 0x67, 0xf0, 0x70, 0xa2, 0x8d, 0xc4, 0x66, 0x93, 0xbd, 0x9c, 0x96, 0xdf, 0x34, 0xb0, 0x65,
	0x7f, 0xcf, 0x25, 0xff, 0x99, 0x77, 0x0f, 0x6e, 0xd9, 0xf7, 0xbf, 0xe7, 0x0b, 0xd8, 0x1a, 0x67,
	0xe2, 0x4a, 0xb2, 0x6c, 0xed, 0x38, 0x25, 0xa3, 0xf3, 0xd0, 0x19, 0xae, 0x0f, 0xf4, 0x19, 0x6c,
	0xa6, 0x22, 0xe2, 0x8a, 0x25, 0x4c, 0x4a, 0xcd, 0x2b, 0x1b, 0x5e, 0xed, 0x06, 0xec, 0x85, 0xe8,
	0x57, 0xe0, 0xb1, 0x85, 0xca, 0x68, 0xa3, 0xe2, 0x32, 0xe9, 0xf6, 0xd6, 0x1d, 0x6d, 0x73, 0x0e,
	0xb1, 0x44, 0xf4, 0x39, 0x6c, 0xc5, 0x3c, 0xe1, 0xf1, 0x3c, 0x26, 0x61, 0x22, 0x89, 0x52, 0x11,
	0x91, 0x0d, 0xd8, 0xcd, 0xed, 0x79, 0xb8, 0xee, 0x0c, 0x47, 0x89, 0x1c, 0xa9, 0x68, 0x88, 0x9e,
	0xc3, 0xc3, 0x34, 0xe3, 0x22, 0xd3, 0xe1, 0x75, 0xc5, 0xf8, 0x74, 0xa6, 0x1a, 0xd5, 0xdd, 0xdc,
	0x5e, 0x0e, 0xd7, 0x57, 0xf0, 0x6b, 0x83, 0xea, 0xe7, 0x0b, 0x59, 0xaa, 0x66, 0xe4, 0x92, 0x67,
	0x52, 0x35, 0xb6, 0x8d, 0xfb, 0xc0, 0x40, 0x5d, 0x8d, 0x04, 0xff, 0xcd, 0xc1, 0x23, 0x17, 0x6e,
	0xf6, 0x49, 0x3f, 0xd4, 0x91, 0xcf, 0xf5, 0xab, 0x8a, 0x84, 0xb0, 0x45, 0x9a, 0x31, 0x29, 0x75,
	0x11, 0xb3, 0x41, 0x53, 0xd7, 0x70, 0xe7, 0x1a, 0x45, 0x5f, 0x01, 0xbc, 0xa1, 0x11, 0x0f, 0xc9,
	0x65, 0x26, 0x62, 0x17, 0x3c, 0xef, 0xab, 0x37, 0x15, 0xc3, 0xee, 0x66, 0x22, 0x46, 0x2f, 0xa1,
	0x6c, 0x97, 0x2a, 0xf1, 0x03, 0x0a, 0x55, 0xc9, 0x70, 0x47, 0x22, 0xf8, 0x25, 0xc0, 0x4d, 0x66,
	0x99, 0xc8, 0x9e, 0x67, 0x8a, 0xa4, 0x19, 0xbb, 0xe4, 0x0b, 0x77, 0x55, 0xd0, 0xd0, 0x99, 0x41,
	0x82, 0x08, 0xb6, 0xde, 0x0a, 0x5e, 0x5d, 0x76, 0x8c, 0xf7, 0x0c, 0xdf, 0xc3, 0x76, 0x82, 0x7e,
	0x0a, 0xf5, 0x98, 0x2e, 0x48, 0x38, 0xcf, 0xa8, 0xae, 0xd1, 0x44, 0x1a, 0x3f, 0x15, 0x70, 0x2d,
	0xa6, 0x8b, 0x23, 0x07, 0x0e, 0x75, 0x49, 0xd0, 0xac, 0xf1, 0x52, 0x31, 0x69, 0x9c, 0x52, 0xc0,
	0xe5, 0x98, 0x2e, 0xda, 0x7a, 0x1e, 0xfc, 0xc5, 0x83, 0xcd, 0xf6, 0x7a, 0xa0, 0xdd, 0xff, 0x09,
	0x9e, 0x02, 0xcc, 0x75, 0x20, 0xd3, 0x29, 0x4b, 0x94, 0xf3, 0x7e, 0x45, 0x23, 0x2d, 0x0d, 0xa0,
	0x67, 0x50, 0xbb, 0xe2, 0x49, 0x28, 0xae, 0xc8, 0x15, 0x0f, 0xd5, 0xcc, 0xb8, 0xde, 0xc3, 0x55,
	0x8b, 0xbd, 0xd6, 0x90, 0x8e, 0x70, 0x47, 0x99, 0xd9, 0xe8, 0xf2, 0x0c, 0xc7, 0xad, 0x3b, 0xb6,
	0xb1, 0xb5, 0x0f, 0xdb, 0x29, 0x9d, 0x32, 0x12, 0x09, 0x1a, 0x12, 0xdd, 0xe4, 0xc4, 0x5c, 0x91,
	0x58, 0x9a, 0xb2, 0x5f, 0xc0, 0x5b, 0xda, 0x76, 0x22, 0x68, 0x38, 0xb2, 0x96, 0x53, 0xa9, 0x43,
	0xc3, 0xb6, 0x31, 0x22, 0x59, 0xc4, 0x26, 0x4a, 0x64, 0xa6, 0x07, 0x54, 0x70, 0xdd, 0xc2, 0x43,
	0x87, 0x6a, 0x47, 0x39, 0xa2, 0x49, 0x2e, 0x4d, 0x29, 0x5b, 0xa0, 0x17, 0xa2, 0x43, 0x28, 0xcd,
	0x18, 0x0d, 0x59, 0x26, 0x1b, 0xbe, 0xe9, 0x20, 0x9f, 0xdf, 0xf1, 0xc4, 0x2d, 0x2f, 0x36, 0x8f,
	0x2d, 0xb7, 0x93, 0xa8, 0x6c, 0x89, 0x57, 0x2b, 0x11, 0x81, 0x2d, 0xb7, 0x43, 0x4a, 0x33, 0x1a,
	0x33, 0xa5, 0xe5, 0xb6, 0x8c, 0xdc, 0xc1, 0x7b, 0xe5, 0x86, 0x66, 0xd5, 0xd9, 0xf5, 0x22, 0xab,
	0xeb, 0xcb, 0x3b, 0x30, 0x7a, 0x09, 0x4f, 0x64, 0xc4, 0x58, 0x4a, 0xe8, 0xa5, 0x62, 0x19, 0xd1,
	0xce, 0x30, 0x7e, 0x8a, 0xa5, 0xa9, 0x61, 0x05, 0xbc, 0x6d, 0xcc, 0x2d, 0x6d, 0x3d, 0x73, 0xc6,
	0x53, 0xb9, 0xf3, 0x35, 0xd4, 0xd6, 0x0f, 0xfc, 0x43, 0xfb, 0xde, 0xd7, 0xf9, 0x2f, 0x73, 0x3b,
	0x87, 0xf0, 0xd1, 0x3b, 0x4f, 0xf7, 0x63, 0x44, 0x82, 0x7f, 0x78, 0xe0, 0x9f, 0x5d, 0xd7, 0xb1,
	0x0f, 0x8d, 0xc4, 0xdf, 0xc1, 0x66, 0x26, 0xc6, 0x42, 0x49, 0xa2, 0x6b, 0xe3, 0x64, 0x69, 0x82,
	0xb1, 0x7e, 0xf0, 0x8b, 0x3b, 0x2b, 0xee, 0x6e, 0xd8, 0xc4, 0x66, 0xd1, 0x99, 0x59, 0x83, 0x6b,
	0xd9, 0xda, 0x0c, 0x7d, 0x0b, 0xc1, 0xaa, 0x4a, 0x3a, 0x69, 0x93, 0xde, 0xba, 0x12, 0xae, 0xa5,
	0x5f, 0xd5, 0xc4, 0xeb, 0x27, 0x8e, 0x69, 0xe5, 0x7e, 0xef, 0x78, 0x37, 0x09, 0xf9, 0x19, 0x6c,
	0x4e, 0xe6, 0x52, 0x89, 0x95, 0x94, 0xa9, 0x8f, 0x15, 0x5c, 0xb3, 0xa0, 0x5d, 0x85, 0xbe, 0x81,
	0xa7, 0x31, 0x4f, 0x4c, 0x80, 0x93, 0x31, 0x53, 0x57, 0x8c, 0x25, 0xe4, 0x26, 0xee, 0x63, 0xdb,
	0xf7, 0x0a, 0xb8, 0x11, 0xf3, 0x44, 0x87, 0x7a, 0xdb, 0x52, 0xce, 0x5c, 0xf4, 0x9f, 0x5a, 0x01,
	0xba, 0x78, 0x8f, 0x80, 0xe7, 0x04, 0xe8, 0xe2, 0xdd, 0x02, 0xcf, 0xa0, 0x16, 0xb2, 0x88, 0x2e,
	0xc9, 0x25, 0x35, 0x49, 0xa3, 0x13, 0x2c, 0xaf, 0x3f, 0x0a, 0x23, 0xba, 0xec, 0x1a, 0x48, 0x17,
	0x33, 0xbd, 0x47, 0xc6, 0x54, 0xc6, 0x99, 0x34, 0x8d, 0xcb, 0xc3, 0x10, 0xd3, 0x05, 0xb6, 0x08,
	0x6a, 0xc2, 0x23, 0x6d, 0x5c, 0x12, 0xab, 0x24, 0xd9, 0x44, 0x24, 0xa1, 0x34, 0x9d, 0xcb, 0xc3,
	0x5b, 0xc6, 0x74, 0xa4, 0x2d, 0x43, 0x6b, 0x40, 0x5f, 0xc1, 0xc7, 0xb6, 0x39, 0xcf, 0x84, 0x54,
	0x64, 0x9a, 0x89, 0x79, 0x7a, 0x93, 0xb5, 0x15, 0x93, 0x92, 0x8f, 0x0d, 0xe1, 0x58, 0x48, 0xf5,
	0x4a, 0x9b, 0xaf, 0xb3, 0xf7, 0x19, 0xd4, 0xe6, 0x92, 0x99, 0x85, 0xe6, 0xf3, 0x16, 0x4c, 0xd3,
	0xa9, 0xce, 0x25, 0x3b, 0x76, 0x50, 0xd0, 0x81, 0xda, 0xfa, 0x13, 0xa3, 0x87, 0x50, 0x1d, 0xb4,
	0x3b, 0x17, 0x04, 0x0f, 0xda, 0x83, 0xd1, 0xd0, 0x7f, 0x80, 0xb6, 0x60, 0xb3, 0xf7, 0xaa, 0x3f,
	0xc0, 0x9d, 0x15, 0x94, 0xd3, 0xd0, 0xe1, 0xf9, 0x70, 0x34, 0x38, 0x5d, 0x41, 0xf9, 0xe0, 0x02,
	0xaa, 0x6b, 0x7d, 0x54, 0x6f, 0x6c, 0x3a, 0xe9, 0x44, 0x11, 0xc5, 0x16, 0xb6, 0x68, 0x95, 0x71,
	0xd5, 0x61, 0x23, 0xb6, 0x50, 0xb6, 0x3b, 0xe9, 0x8f, 0x5e, 0x22, 0x13, 0x9a, 0xca, 0x99, 0x50,
	0xc6, 0x9b, 0x65, 0xdd, 0x9d, 0x34, 0x3c, 0x74, 0x68, 0xf0, 0xe7, 0xeb, 0x6a, 0x6c, 0x73, 0xea,
	0xfe, 0x39, 0xf0, 0x18, 0x36, 0x6c, 0x75, 0x70, 0x95, 0xd8, 0xcd, 0x4c, 0x95, 0xce, 0x22, 0x92,
	0xb1, 0x29, 0x5b, 0xa4, 0xab, 0x2f, 0xf2, 0x79, 0x16, 0x61, 0x03, 0x04, 0xff, 0xce, 0xc1, 0xf6,
	0xe1, 0x2d, 0x07, 0x7f, 0x68, 0x32, 0x76, 0xa1, 0xcc, 0x53, 0x92, 0xd1, 0x64, 0xca, 0x1a, 0x05,
	0x53, 0xea, 0x7e, 0xfe, 0xae, 0x6f, 0xb5, 0x3b, 0xfb, 0x35, 0x7b, 0x29, 0xd6, 0x4b, 0x70, 0x89,
	0xdb, 0xc1, 0xce, 0x6f, 0xa0, 0xe4, 0x30, 0xf4, 0x04, 0x4a, 0x3c, 0xb5, 0x0d, 0xdc, 0x1e, 0x68,
	0x83, 0xa7, 0xa6, 0x43, 0x3f, 0x02, 0x8f, 0xa7, 0xba, 0x3d, 0xdb, 0x02, 0x53, 0xe4, 0xe9, 0x48,
	0x04, 0x7f, 0xcb, 0x43, 0xe5, 0x44, 0x4c, 0x4f, 0xd8, 0x1b, 0x16, 0x49, 0xf4, 0x5b, 0xa8, 0x44,
	0x62, 0x4a, 0x22, 0x3d, 0x6b, 0xe4, 0xcc, 0x79, 0x9e, 0xdd, 0xfd, 0x17, 0x58, 0x91, 0xaf, 0x47,
	0xb8, 0x1c, 0xb9, 0xd1, 0xce, 0x1f, 0xa0, 0xbc, 0x42, 0xb5, 0x8f, 0x23, 0x31, 0x9d, 0xb2, 0x6c,
	0x75, 0x0c, 0x3b, 0x43, 0x5f, 0x80, 0x67, 0xf5, 0xf3, 0xa6, 0xee, 0x7c, 0xf2, 0xff, 0xf5, 0x8d,
	0xb8, 0x25, 0x07, 0x33, 0xf0, 0xac, 0xec, 0x26, 0x54, 0xce, 0xfb, 0x47, 0x9d, 0x6e, 0xaf, 0xdf,
	0x39, 0xf2, 0x1f, 0xa0, 0x12, 0x14, 0x5a, 0x27, 0x27, 0x7e, 0x0e, 0x55, 0xc0, 0x1b, 0xe1, 0xd6,
	0x61, 0xc7, 0xcf, 0xeb, 0xe1, 0x51, 0xa7, 0x7d, 0xfe, 0xca, 0x2f, 0xa0, 0x32, 0x14, 0x7b, 0xfd,
	0xee, 0xc0, 0x2f, 0xea, 0xd1, 0xeb, 0x16, 0xee, 0xfb, 0x9e, 0x36, 0x77, 0x30, 0x1e, 0x60, 0x7f,
	0x43, 0x0f, 0xbb, 0xad, 0x51, 0xeb, 0xc4, 0x2f, 0x69, 0xa1, 0x41, 0xb7, 0xeb, 0x97, 0x83, 0xbf,
	0xe6, 0xa0, 0x8a, 0x45, 0xc4, 0x4e, 0x69, 0x9a, 0xf2, 0xe4, 0xed, 0xb7, 0x7d, 0x0c, 0x1e, 0x8b,
	0x29, 0xb7, 0xe7, 0xaf, 0x1c, 0x3f, 0xc0, 0x76, 0xaa, 0x71, 0x93, 0x92, 0x36, 0xa4, 0x34, 0x6e,
	0xa6, 0x3a, 0x16, 0x32, 0x11, 0xe9, 0xdf, 0x8a, 0xc2, 0x5e, 0xfd, 0xad, 0x58, 0xd0, 0x3b, 0x61,
	0x43, 0x68, 0xfb, 0x50, 0x37, 0x4a, 0x44, 0x64, 0x36, 0xb9, 0x5f, 0x1c, 0x42, 0x51, 0xdb, 0x51,
	0x0d, 0xca, 0xad, 0xfe, 0x05, 0x39, 0x1f, 0x76, 0xb0, 0xbb, 0x72, 0xff, 0xc2, 0x5e, 0xb9, 0x75,
	0x74, 0xda, 0xeb, 0xfb, 0x79, 0x54, 0x85, 0xd2, 0xe1, 0x39, 0x6e, 0x8d, 0x06, 0xd8, 0x2f, 0x68,
	0x3a, 0xee, 0xb4, 0x8e, 0x06, 0xfd, 0x93, 0x0b, 0xbf, 0xd8, 0x7e, 0x09, 0x4f, 0x12, 0xd1, 0x4c,
	0xc6, 0xcd, 0x24, 0xa1, 0xb7, 0x37, 0x6f, 0x57, 0x6d, 0x38, 0x9d, 0xe9, 0xef, 0xb3, 0x3f, 0xde,
	0xfc, 0x32, 0x13, 0x9a, 0xf2, 0xf1, 0x86, 0xf9, 0x6a, 0xfb, 0xf5, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xfa, 0xff, 0x77, 0xbc, 0x58, 0x0f, 0x00, 0x00,
}
