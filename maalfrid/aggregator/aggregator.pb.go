// Code generated by protoc-gen-go. DO NOT EDIT.
// source: aggregator.proto

package aggregator

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("aggregator.proto", fileDescriptor_60785b04c84bec7e) }

var fileDescriptor_60785b04c84bec7e = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x4c, 0x4f, 0x2f,
	0x4a, 0x4d, 0x4f, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x48, 0x49, 0xa7, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x83, 0x65, 0x92, 0x4a, 0xd3, 0xf4, 0x53,
	0x73, 0x0b, 0x4a, 0x2a, 0x21, 0x0a, 0x8d, 0x66, 0x33, 0x71, 0x71, 0x39, 0xc2, 0xd5, 0x0a, 0x79,
	0x70, 0x89, 0x04, 0x95, 0xe6, 0xf9, 0x24, 0xe6, 0xa5, 0x97, 0x26, 0xa6, 0xa7, 0xba, 0xa4, 0x96,
	0xa4, 0x26, 0x97, 0x64, 0xe6, 0xe7, 0x09, 0x89, 0xe9, 0x41, 0x0c, 0xd1, 0x83, 0x19, 0xa2, 0xe7,
	0x0a, 0x32, 0x44, 0x0a, 0x87, 0xb8, 0x12, 0x83, 0x90, 0x13, 0x17, 0x5f, 0x50, 0x69, 0x1e, 0xcc,
	0x68, 0xf2, 0xcc, 0x70, 0xe0, 0xe2, 0x09, 0xae, 0xcc, 0x4b, 0x76, 0xcd, 0x2b, 0xc9, 0x2c, 0xc9,
	0x4c, 0x2d, 0x26, 0xc3, 0x04, 0x5b, 0x2e, 0x4e, 0x90, 0x09, 0xc1, 0xa9, 0xa9, 0x29, 0x64, 0x68,
	0x4f, 0x62, 0x03, 0x8b, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xe3, 0xd0, 0xc7, 0x61,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AggregatorClient is the client API for Aggregator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AggregatorClient interface {
	RunLanguageDetection(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	RunAggregation(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	SyncEntities(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	SyncSeeds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type aggregatorClient struct {
	cc *grpc.ClientConn
}

func NewAggregatorClient(cc *grpc.ClientConn) AggregatorClient {
	return &aggregatorClient{cc}
}

func (c *aggregatorClient) RunLanguageDetection(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/aggregator.Aggregator/RunLanguageDetection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) RunAggregation(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/aggregator.Aggregator/RunAggregation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) SyncEntities(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/aggregator.Aggregator/SyncEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) SyncSeeds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/aggregator.Aggregator/SyncSeeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregatorServer is the server API for Aggregator service.
type AggregatorServer interface {
	RunLanguageDetection(context.Context, *empty.Empty) (*empty.Empty, error)
	RunAggregation(context.Context, *empty.Empty) (*empty.Empty, error)
	SyncEntities(context.Context, *empty.Empty) (*empty.Empty, error)
	SyncSeeds(context.Context, *empty.Empty) (*empty.Empty, error)
}

func RegisterAggregatorServer(s *grpc.Server, srv AggregatorServer) {
	s.RegisterService(&_Aggregator_serviceDesc, srv)
}

func _Aggregator_RunLanguageDetection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).RunLanguageDetection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregator.Aggregator/RunLanguageDetection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).RunLanguageDetection(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_RunAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).RunAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregator.Aggregator/RunAggregation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).RunAggregation(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_SyncEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).SyncEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregator.Aggregator/SyncEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).SyncEntities(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_SyncSeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).SyncSeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregator.Aggregator/SyncSeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).SyncSeeds(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Aggregator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aggregator.Aggregator",
	HandlerType: (*AggregatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunLanguageDetection",
			Handler:    _Aggregator_RunLanguageDetection_Handler,
		},
		{
			MethodName: "RunAggregation",
			Handler:    _Aggregator_RunAggregation_Handler,
		},
		{
			MethodName: "SyncEntities",
			Handler:    _Aggregator_SyncEntities_Handler,
		},
		{
			MethodName: "SyncSeeds",
			Handler:    _Aggregator_SyncSeeds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aggregator.proto",
}
